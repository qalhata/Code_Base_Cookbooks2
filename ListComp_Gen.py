# -*- coding: utf-8 -*-
"""
Created on Tue Mar 28 19:13:25 2017

@author: Shabaka
"""

# List of strings
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas',
              'boromir', 'gimli']

# List comprehension
fellow1 = [member for member in fellowship if len(member) >= 7]

print(fellow1)

# Generator expression
fellow2 = (member for member in fellowship if len(member) >= 7)

print(fellow2)

# '''''''''  Basic Gen Expression '''''' '#

# Create generator object: result
result = (num for num in range(31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)


# '''' Output Change in Generator Expression ''''''''' ####

# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

print(lannister)

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
print('Lannister Values.. i.e Name Lengths')

for value in lengths:
    print(value)


# '''''''''''''''''' Generator Build _ Basic '''''''''''' ###

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths


def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)